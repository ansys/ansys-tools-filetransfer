[{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes FileTransfer Tool API endpoints so that you can\nunderstand how to interact with them programmatically.\n\n\n\n"},{"objectID":"Home","href":"index.html#ansys-filetransfer-tool-documentation","title":"Ansys FileTransfer Tool documentation","text":"Ansys FileTransfer Tool documentation\n\nThe Ansys FileTransfer Tool is a simple gRPC API for moving files between\na client and a remote server. Its target use case are local Docker deployments or\nsimple remote deployments.\n\nThis documentation describes the FileTransfer Tool itself. For information on the\nserver component, see the\nFileTransfer Tool Server documentation.\n\nThe FileTransfer Tool does not provide any security measures. Any file\non the server component can be accessed by any client. Without additional security\nmeasures, it is unsuited for use over an untrusted network.\n\nGetting started \n\nExplains how to install the FileTransfer Tool in user mode and then how\nto use it from a Python script.\n\nusage\n\nAPI reference \n\nDescribes FileTransfer Tool API endpoints so that you can understand how to interact with\nthem programmatically.\n\napi/index\n\nContribute \n\nProvides information on how to install the FileTransfer Tool in developer mode and make contributions\nto the codebase and documentation.\n\ncontribute"},{"objectID":"Home","href":"api/_autosummary/ansys.tools.filetransfer.Client.html#client","title":"Client","text":"Client\n\n\n\nclass ansys.tools.filetransfer.Client(channel, max_message_length=None)\n\nProvides the high-level Python client for the FileTransfer Tool.\n\nYou use this client’s high-level API to upload and download files to\nthe FileTransfer Tool Server.\n\nMethods\n\n"},{"objectID":"Contribute","href":"contribute.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in\nContributing\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to the FileTransfer Tool.\n\nThe following contribution information is specific to the FileTransfer Tool."},{"objectID":"Contribute","href":"contribute.html#install-in-development-mode","title":"Contribute > Install in development mode","text":"Install in development mode\n\nInstalling the FileTransfer Tool in development mode allows you\nto modify the source and enhance it.\n\nClone the repository and enter the newly created directory:\n\nInstall dependencies:\n\nThe project uses Poetry to manage the development environment.\n\nCreate a virtual environment and install the package with the\ndevelopment dependencies:\n\nActivate the virtual environment:"},{"objectID":"Contribute","href":"contribute.html#test","title":"Contribute > Test","text":"Test\n\nYou can run the tests for the FileTransfer Tool with either\na local executable of the server or with a Docker container.\n\nUnless you are contributing to development of the server, using a Docker\ncontainer is recommended.\n\nPull the Docker image:\n\nRun the tests with tox.\n\nFor example, this command runs the test for Python 3.10:\n\nAlternatively, you can run the tests directly via pytest. Ensure that the\ndevelopment virtual environment is activated:\n\nThen, run the tests:\n\nRunning the tests directly via pytest also allows you to pass additional\narguments. For example, this command runs the tests with a local executable of\nthe server:\n\nThis command runs the tests with a different Docker image of the server:"},{"objectID":"Contribute","href":"contribute.html#build-documentation","title":"Contribute > Build documentation","text":"Build documentation\n\nYou can build the documentation with this tox command:\n\nThe resulting files are located in the doc/_build/html directory."},{"objectID":"Contribute","href":"contribute.html#run-style-checks","title":"Contribute > Run style checks","text":"Run style checks\n\nThe style checks use pre-commit and can be run using this tox command:\n\nYou can also configure the style checks to run automatically before each git commit\nwith this command:\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.tools.filetransfer.Client.download_file.html#download_file","title":"download_file","text":"download_file\n\n\n\nClient.download_file(remote_filename, local_filename, chunk_size=65536, compute_sha1_checksum=True)\n\nDownload a file from the server.\n\nParameters\n\nremote_filename (str) – Name of the remote file to download.\n\nlocal_filename (str) – Name of the local file to create.\n\nchunk_size (int, default: 65536) – Maximum size in bytes of a chunk of data to transfer per request.\n\ncompute_sha1_checksum (bool, default: True) – Whether to compute the SHA1-checksum of the file to be downloaded on the\nserver-side.\n\nRaises\n\nRuntimeError : – If a response indicates an error on the server-side.\n\nValueError : – If the checksums between the downloaded file and remote file do not match.\n\nReturn type\n\nNone"},{"objectID":"Home","href":"api/_autosummary/ansys.tools.filetransfer.Client.from_server_address.html#from_server_address","title":"from_server_address","text":"from_server_address\n\n\n\nclassmethod Client.from_server_address(server_address, *, max_message_length=131072)\n\nInitialize the client from a server URL.\n\nParameters\n\nserver_address (str) – IPv4/IPv6 address and port of the server to connect to. For example, 10.0.0.42:12345.\n\nmax_message_length (int, default: 131072) – Maximum message length in bytes to send over the channel.\n\nReturn type\n\nClient\n\nReturns\n\nInstantiated FileTransfer client."},{"objectID":"Home","href":"api/_autosummary/ansys.tools.filetransfer.Client.upload_file.html#upload_file","title":"upload_file","text":"upload_file\n\n\n\nClient.upload_file(local_filename, remote_filename, chunk_size=65536)\n\nUpload a file to the server.\n\nParameters\n\nlocal_filename (str) – Name of the local file to upload.\n\nremote_filename (str) – Name of the remote file to create.\n\nchunk_size (int, default: 65536) – Maximum size in bytes of a chunk of data to transfer per request.\n\nRaises\n\nRuntimeError : – If a response indicates an error on the server-side.\n\nReturn type\n\nNone"},{"objectID":"Getting started","href":"usage.html#getting-started","title":"Getting started","text":"Getting started"},{"objectID":"Getting started","href":"usage.html#installation","title":"Getting started > Installation","text":"Installation\n\nInstall the latest version of the FileTransfer Tool from PyPI with this command:\n\nYou should use a virtual environment\nbecause it keeps Python packages isolated from your system Python."},{"objectID":"Getting started","href":"usage.html#usage","title":"Getting started > Usage","text":"Usage\n\nTo begin using the FileTransfer Tool, import the package with this command:\n\nThe FileTransfer Tool API contains a single class, Client, which is used to\ncommunicate with the server. You instantiate this class with the server\naddress and port number:\n\nAlternatively, you can instantiate the Client with the grpc.Channel class:\n\nThe preceding code allows you to change how the channel is created.\n\nFollowing instantiation, you can use the client to upload and download files:"}]